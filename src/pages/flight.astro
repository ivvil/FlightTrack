---
export const prerender = false; 
import { getJson } from "serpapi"
import { Icon } from 'astro-icon/components';
import FlightMap from "../components/FlightMap.svelte";
import DirectFlight from "../components/DirectFlight.astro";
import LayoverFlight from "../components/LayoverFlight.astro";

import '../styles/global.css';

const url = new URL(Astro.request.url);
const origin = url.searchParams.get("origin") || "MAD";
const destination = url.searchParams.get("destination") || "PRG";
const outbound_date = url.searchParams.get("departure_date") || "2025-02-11";
const return_date = url.searchParams.get("return_date") || "2025-02-17";

const apiParameters = {
  api_key: import.meta.env.FLIGHT_DATA_API_KEY,
  engine: "google_flights",
  hl: "en",
  gl: "us",
  departure_id: origin,
  arrival_id: destination,
  outbound_date,
  return_date,
  currency: "USD"
};

let flightData = await new Promise((resolve, reject) => {
  getJson(apiParameters, (json) => {
    resolve(json);
  });
});

const flights = [
  ...(flightData.best_flights || []),
  ...(flightData.other_flights || [])
];

const ordenarResultado = (orden) => {
  switch (orden) {
    case "mayorPrecio":
      flights.sort((a, b) => b.price - a.price);
      break;
    case "menorPrecio":
      flights.sort((a, b) => a.price - b.price);
      break;
    case "mayorDuracion":
      flights.sort((a, b) => b.total_duration - a.total_duration);
      break;
    case "menorDuracion":
      flights.sort((a, b) => a.total_duration - b.total_duration);
      break;
    case "masEscalas":
      flights.sort((a, b) => b.flights.length - a.flights.length);
      break;
    case "menosEscalas":
      flights.sort((a, b) => a.flights.length - b.flights.length);
      break;
    default:
      break;
  }
};

const criterioOrden = url.searchParams.get("ordenar");
if (criterioOrden) {
  ordenarResultado(criterioOrden);
}

// Filtra solo los vuelos directos sin escalas
const directFlights = flights.filter((flight) => flight.flights.length === 1);
const layoverFlights = flights.filter((flight) => flight.flights.length > 1);
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Resultados de Vuelos</title>
  </head>
  <body class="min-h-screen bg-gray-50 py-10">
    <div class="max-w-7xl mx-auto px-4">
      <a href="/" class="flex items-center text-blue-500 hover:text-blue-700 mb-6">
        <Icon name="mdi:arrow-left" class="h-6 w-6 mr-2" />
        Volver
      </a>

      <!-- Formulario con estilos -->
      <div class="mb-8">
        <form method="GET" action="/flight" class="flex flex-wrap items-center gap-4">
          <input type="hidden" name="origin" value={origin} />
          <input type="hidden" name="destination" value={destination} />
          <input type="hidden" name="departure_date" value={outbound_date} />
          <input type="hidden" name="return_date" value={return_date} />
          <label for="ordenar" class="text-gray-700 font-medium">Ordenar por:</label>
          <select name="ordenar" id="ordenar" onchange="this.form.submit()" class="border border-gray-300 rounded-md p-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">Selecciona...</option>
            <option value="mayorPrecio" selected={criterioOrden === "mayorPrecio"}>Mayor Precio</option>
            <option value="menorPrecio" selected={criterioOrden === "menorPrecio"}>Menor Precio</option>
            <option value="mayorDuracion" selected={criterioOrden === "mayorDuracion"}>Mayor Duración</option>
            <option value="menorDuracion" selected={criterioOrden === "menorDuracion"}>Menor Duración</option>
            <option value="masEscalas" selected={criterioOrden === "masEscalas"}>Más Escalas</option>
            <option value="menosEscalas" selected={criterioOrden === "menosEscalas"}>Menos Escalas</option>
          </select>
        </form>
      </div>

      <h1 class="text-4xl font-bold text-gray-800 mb-10 text-center">Resultados de Vuelos</h1>

	  <FlightMap client:load client:only origin="MAD" destination="PRG" apiKey={import.meta.env.AIRPORT_DATA_API_KEY} />

	  <h2 class="text-2xl font-bold text-gray-800 mb-10 text-center">Vuelos directos:</h2>

      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {directFlights.map((flight) => {
          return (
		  <DirectFlight flight={flight} />
			);
			})}
      </div>

	  <h2 class="text-2xl font-bold text-gray-800 mb-10 text-center">Vuelos con escalas:</h2>

	  <ul role="list" class="divide-y divide-gray-100">
        {layoverFlights.map((flight) => {
          return (
          <LayoverFlight flight={flight} />
			);
			})}
      </ul>
    </div>
  </body>
</html>
